/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.learn.turnup.apis;


import java.util.UUID;

import com.learn.turnup.dto.LessonDTO;
import com.learn.turnup.dto.NewLessonDTO;
import com.learn.turnup.dto.NewWordDTO;
import com.learn.turnup.dto.WordDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-07T10:45:16.129411600+02:00[Europe/Prague]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "Lesson", description = "Lessons own Words")
public interface LessonsApi {

    /**
     * POST /lessons/{lessonId}/copy : Copy a shared lesson
     *
     * @param xUserId  (required)
     * @param lessonId  (required)
     * @return Lesson copied (status code 201)
     *         or User id missing or invalid (status code 401)
     *         or Unauthorized access to lesson (status code 403)
     */
    @Operation(
        operationId = "copySharedLesson",
        summary = "Copy a shared lesson",
        tags = { "Lesson" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Lesson copied"),
            @ApiResponse(responseCode = "401", description = "User id missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Unauthorized access to lesson")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/lessons/{lessonId}/copy"
    )
    
    ResponseEntity<Void> copySharedLesson(
        @NotNull @Parameter(name = "X-User-Id", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-User-Id", required = true) UUID xUserId,
        @Parameter(name = "lessonId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("lessonId") UUID lessonId
    );


    /**
     * POST /lessons : Create a new lesson
     *
     * @param xUserId  (required)
     * @param newLessonDTO  (required)
     * @return Lesson created (status code 201)
     *         or Invalid input (status code 400)
     *         or User id missing or invalid (status code 401)
     */
    @Operation(
        operationId = "createLesson",
        summary = "Create a new lesson",
        tags = { "Lesson" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Lesson created"),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "401", description = "User id missing or invalid")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/lessons",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createLesson(
        @NotNull @Parameter(name = "X-User-Id", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-User-Id", required = true) UUID xUserId,
        @Parameter(name = "NewLessonDTO", description = "", required = true) @Valid @RequestBody NewLessonDTO newLessonDTO
    );


    /**
     * POST /lessons/{lessonId}/words : Create new words in a lesson
     *
     * @param xUserId  (required)
     * @param lessonId  (required)
     * @param newWordDTO  (required)
     * @return Word created (status code 201)
     */
    @Operation(
        operationId = "createWords",
        summary = "Create new words in a lesson",
        tags = { "Lesson" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Word created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/lessons/{lessonId}/words",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createWords(
        @NotNull @Parameter(name = "X-User-Id", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-User-Id", required = true) UUID xUserId,
        @Parameter(name = "lessonId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("lessonId") UUID lessonId,
        @Parameter(name = "NewWordDTO", description = "", required = true) @Valid @RequestBody List<@Valid NewWordDTO> newWordDTO
    );


    /**
     * DELETE /lessons/{lessonId} : Delete a lesson
     *
     * @param xUserId  (required)
     * @param lessonId  (required)
     * @return Lesson deleted (status code 204)
     *         or User id missing or invalid (status code 401)
     */
    @Operation(
        operationId = "deleteLesson",
        summary = "Delete a lesson",
        tags = { "Lesson" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Lesson deleted"),
            @ApiResponse(responseCode = "401", description = "User id missing or invalid")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/lessons/{lessonId}"
    )
    
    ResponseEntity<Void> deleteLesson(
        @NotNull @Parameter(name = "X-User-Id", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-User-Id", required = true) UUID xUserId,
        @Parameter(name = "lessonId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("lessonId") UUID lessonId
    );


    /**
     * GET /lessons/{lessonId}/words : Get all words of a lesson
     *
     * @param xUserId  (required)
     * @param lessonId  (required)
     * @return Words of the lesson (status code 200)
     *         or User id missing or invalid (status code 401)
     *         or Unauthorized access to lesson (status code 403)
     */
    @Operation(
        operationId = "getWordsByLessonId",
        summary = "Get all words of a lesson",
        tags = { "Lesson" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Words of the lesson", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WordDTO.class)))
            }),
            @ApiResponse(responseCode = "401", description = "User id missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Unauthorized access to lesson")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/lessons/{lessonId}/words",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<WordDTO>> getWordsByLessonId(
        @NotNull @Parameter(name = "X-User-Id", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-User-Id", required = true) UUID xUserId,
        @Parameter(name = "lessonId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("lessonId") UUID lessonId
    );


    /**
     * PUT /lessons : Update a lesson
     *
     * @param xUserId  (required)
     * @param lessonDTO  (required)
     * @return Lesson created (status code 201)
     *         or Invalid input (status code 400)
     *         or User id missing or invalid (status code 401)
     */
    @Operation(
        operationId = "updateLesson",
        summary = "Update a lesson",
        tags = { "Lesson" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Lesson created"),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "401", description = "User id missing or invalid")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/lessons",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateLesson(
        @NotNull @Parameter(name = "X-User-Id", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-User-Id", required = true) UUID xUserId,
        @Parameter(name = "LessonDTO", description = "", required = true) @Valid @RequestBody LessonDTO lessonDTO
    );

}
