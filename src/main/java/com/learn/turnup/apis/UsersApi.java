/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.learn.turnup.apis;


import java.util.UUID;

import com.learn.turnup.dto.AppUserDTO;
import com.learn.turnup.dto.LessonDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-09T13:40:59.494461+02:00[Europe/Prague]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "User", description = "Users own Lessons")
public interface UsersApi {

    /**
     * POST /users : Create a user
     *
     * @param appUserDTO  (required)
     * @return User created (status code 200)
     *         or Invalid input (status code 400)
     *         or User name already exists (status code 409)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create a user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UUID.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "409", description = "User name already exists")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<UUID> createUser(
        @Parameter(name = "AppUserDTO", description = "", required = true) @Valid @RequestBody AppUserDTO appUserDTO
    );


    /**
     * DELETE /users : Delete a user
     *
     * @param xUserId  (required)
     * @return User deleted (status code 204)
     *         or Invalid input (status code 400)
     *         or User ID is not recognized (status code 401)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Delete a user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "204", description = "User deleted"),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "401", description = "User ID is not recognized")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users"
    )
    
    ResponseEntity<Void> deleteUser(
        @NotNull @Parameter(name = "X-User-Id", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-User-Id", required = true) UUID xUserId
    );


    /**
     * GET /users/me/lessons : Get all lessons of logged in user
     *
     * @param xUserId  (required)
     * @return Lessons of logged in user (status code 200)
     *         or Invalid input (status code 400)
     *         or User ID is not recognized (status code 401)
     *         or No lessons found for user (status code 404)
     */
    @Operation(
        operationId = "getLessonsOfLoggedInUser",
        summary = "Get all lessons of logged in user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lessons of logged in user", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LessonDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "401", description = "User ID is not recognized"),
            @ApiResponse(responseCode = "404", description = "No lessons found for user")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/me/lessons",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<LessonDTO>> getLessonsOfLoggedInUser(
        @NotNull @Parameter(name = "X-User-Id", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-User-Id", required = true) UUID xUserId
    );


    /**
     * POST /users/login : Login a user
     *
     * @param appUserDTO  (required)
     * @return User logged in (status code 200)
     *         or Invalid input (status code 400)
     *         or User ID is not recognized (status code 401)
     */
    @Operation(
        operationId = "loginUser",
        summary = "Login a user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User logged in", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UUID.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "401", description = "User ID is not recognized")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<UUID> loginUser(
        @Parameter(name = "AppUserDTO", description = "", required = true) @Valid @RequestBody AppUserDTO appUserDTO
    );


    /**
     * PUT /users : Update a user
     *
     * @param xUserId  (required)
     * @param appUserDTO  (required)
     * @return User updated (status code 201)
     *         or Invalid input (status code 400)
     *         or User ID is not recognized (status code 401)
     *         or User name already exists (status code 409)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Update a user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User updated"),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "401", description = "User ID is not recognized"),
            @ApiResponse(responseCode = "409", description = "User name already exists")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateUser(
        @NotNull @Parameter(name = "X-User-Id", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-User-Id", required = true) UUID xUserId,
        @Parameter(name = "AppUserDTO", description = "", required = true) @Valid @RequestBody AppUserDTO appUserDTO
    );

}
